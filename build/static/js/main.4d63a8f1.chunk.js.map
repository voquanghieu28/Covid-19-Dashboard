{"version":3,"sources":["pages/Charts.js","pages/News.js","pages/Countries.js","App.js","serviceWorker.js","index.js"],"names":["Charts","props","state","isOpen","countries","lineChart","pieChart","total","active","death","recover","fetch","then","res","json","data","setState","this","selectCountry","cases","recovered","deaths","ctx","document","getElementById","getContext","Chart","type","datasets","fill","label","backgroundColor","borderColor","pointRadius","options","legend","labels","fontSize","responsive","scales","xAxes","time","unit","country","i","length","date","Date","last_update","push","x","y","total_cases","total_deaths","total_recovered","currentRecovered","currentDeaths","currentCases","currentActive","numbers","drawLineChart","drawPieChart","update","Container","fluid","Row","xs","sm","md","style","Col","className","width","height","id","color","position","bottom","right","marginRight","maxWidth","Input","name","onChange","e","target","value","map","index","key","alpha2","Component","News","headers","result","news","error","isLoaded","code","Alert","CardGroup","images","Card","CardImg","top","src","url","alt","CardBody","CardTitle","title","CardSubtitle","CardText","excerpt","CardLink","href","webUrl","display","float","disabled","selected","renderNews","Countries","center","Table","striped","hover","scope","Country","CountryCode","fontWeight","TotalConfirmed","NewConfirmed","TotalDeaths","NewDeaths","TotalRecovered","NewRecovered","toLocaleString","App","Navbar","dark","expand","NavbarBrand","process","NavbarToggler","onClick","toggle","Collapse","navbar","Nav","NavItem","NavLink","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","maxHeight","overflowY","DropdownItem","divider","NavbarText","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4d63a8f1.chunk.js","sourcesContent":["import React, { useState, Component } from 'react';\r\n\r\n\r\nimport {  Button,  \r\n          Collapse,\r\n          Navbar,\r\n          NavbarToggler,\r\n          NavbarBrand,\r\n          Nav,\r\n          NavItem,\r\n          NavLink,\r\n          UncontrolledDropdown,\r\n          FormGroup,\r\n          Label, Input,\r\n          NavbarText,\r\n          Card,\r\n          Row, Col, Container,\r\n          Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nimport Chart from 'chart.js';\r\n\r\n\r\nclass Charts extends Component{\r\n  // const [isOpen, setIsOpen] = useState(false);\r\n  // const toggle = () => setIsOpen(!isOpen);\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isOpen : false,\r\n      countries : [],\r\n      lineChart : null,\r\n      pieChart : null,\r\n      isOpen : false, \r\n      numbers : {\r\n        total : null, \r\n        active: null,\r\n        death: null,\r\n        recover: null\r\n      }\r\n    }\r\n\r\n    fetch('https://covid19-api.org/api/countries')\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        this.setState({countries : data})\r\n    })\r\n    \r\n  }\r\n\r\n  toggle() {\r\n    this.setState({isOpen : !this.state.isOpen})\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.selectCountry('')\r\n  }\r\n\r\n  drawLineChart(cases, recovered, deaths) {\r\n    var ctx = document.getElementById('lineChart').getContext('2d');\r\n    this.state.lineChart = new Chart(ctx, { \r\n        type: 'line', \r\n        data: {\r\n            datasets: [\r\n                {\r\n                  fill : false,\r\n                  label: 'Cases',\r\n                  backgroundColor: 'rgb(254, 219, 0)',\r\n                  borderColor: 'rgb(254, 219, 0)',\r\n                  data: cases,\r\n                  pointRadius : 1.5\r\n                }, \r\n                {\r\n                  fill : false,\r\n                  label: 'Recovered',\r\n                  backgroundColor: 'rgb(11, 150, 0)',\r\n                  borderColor: 'rgb(11, 150, 0)',\r\n                  data: recovered,\r\n                  pointRadius : 1.5\r\n                },\r\n                {\r\n                  fill : false,\r\n                  label: 'Death',\r\n                  backgroundColor: 'rgb(219, 0, 0)',\r\n                  borderColor: 'rgb(219, 0, 0)',\r\n                  data: deaths,\r\n                  pointRadius : 1.5\r\n                },\r\n            ]\r\n        },\r\n\r\n        options: {\r\n          legend: {\r\n              labels: {\r\n                fontSize: 15\r\n              }\r\n          },\r\n          responsive: true,\r\n          scales: {\r\n            xAxes: [{\r\n                type: 'time',\r\n                time: {\r\n                    unit: 'month'\r\n                }\r\n            }]\r\n        }\r\n        }\r\n    });\r\n  }\r\n\r\n  drawPieChart(active, recovered, death) {\r\n    var ctx = document.getElementById('pieChart').getContext('2d');\r\n    this.state.pieChart = new Chart(ctx, {\r\n        type: 'pie',\r\n        data: {\r\n            datasets: [{\r\n                data: [active, recovered, death], \r\n                backgroundColor : ['rgb(255, 205, 86)','rgb(54, 162, 235)','rgb(255, 99, 132)']\r\n            }],\r\n            labels: [\r\n                'Active',\r\n                'Recovered',\r\n                'Death'\r\n            ],\r\n            \r\n        },\r\n        \r\n        options: {\r\n          legend: {\r\n            labels: {\r\n                fontSize: 15\r\n            }\r\n        },\r\n        }\r\n    });\r\n  }\r\n\r\n \r\n\r\n  selectCountry(country) {\r\n   \r\n    fetch('https://covid19-api.org/api/timeline/'+country)\r\n    .then(res => res.json())\r\n    .then(data => {\r\n      \r\n      var cases     = []\r\n      var deaths    = []\r\n      var recovered = []\r\n      \r\n      for (var i=data.length-1; i>=0; i--) {\r\n        var date = new Date(data[i].last_update)\r\n        cases.push({\r\n          x : date,\r\n          y : data[i].cases || data[i].total_cases\r\n        })\r\n\r\n        deaths.push({\r\n          x : date,\r\n          y : data[i].deaths || data[i].total_deaths\r\n        })\r\n        recovered.push({\r\n          x : date,\r\n          y : data[i].recovered || data[i].total_recovered\r\n        })\r\n      }\r\n\r\n      var currentRecovered = data[0].recovered || data[0].total_recovered\r\n      var currentDeaths = data[0].deaths || data[0].total_deaths\r\n      var currentCases = data[0].cases || data[0].total_cases\r\n      var currentActive = currentCases - currentDeaths - currentRecovered\r\n\r\n      this.setState({numbers : {\r\n        total : currentCases, \r\n        active: currentActive,\r\n        death: currentDeaths,\r\n        recover: currentRecovered\r\n      }})\r\n      \r\n\r\n      if(!this.state.lineChart) {\r\n        this.drawLineChart(cases, recovered, deaths)\r\n        this.drawPieChart(currentActive, currentRecovered, currentDeaths)\r\n        return\r\n      }\r\n    \r\n      \r\n      \r\n      var lineChart = this.state.lineChart\r\n      lineChart.data.datasets[0].data = cases\r\n      lineChart.data.datasets[1].data = recovered\r\n      lineChart.data.datasets[2].data = deaths\r\n      lineChart.update()\r\n\r\n      var pieChart = this.state.pieChart\r\n      pieChart.data.datasets[0].data = [currentActive, currentRecovered, currentDeaths]\r\n      pieChart.update()\r\n\r\n    });\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n       \r\n            <Container fluid>\r\n\r\n                <Row xs=\"1\" sm=\"1\" md=\"2\" style={{backgroundColor : \"#EDEDED\"}}>   \r\n\r\n                    <Col md={8}  className=\"d-flex justify-content-center mb-3 mt-3\">\r\n                        <div style={{width: '100%', height : '100%'}} className=\"shadow-lg p-3 bg-white rounded\"> {/* border border-dark rounded*/}\r\n                        \r\n                            <canvas height=\"100%\"  id=\"lineChart\"></canvas>\r\n                            <center><h5>Country timeline</h5></center>\r\n                        </div>                    \r\n                    </Col>  \r\n              \r\n                    <Col md={4} className=\"d-flex justify-content-center mb-3 mt-3\">\r\n                        <div style={{width: '100%', height : '100%'}} className=\"shadow-lg p-3 bg-white rounded\">                   \r\n                            <canvas   width=\"100%\" id=\"pieChart\"></canvas>\r\n                            <center>                \r\n                              <h5>Total cases: {this.state.numbers.total} </h5>\r\n                              <h5 style={{color : \"orange\"}}>Active cases: {this.state.numbers.active} </h5>\r\n                              <h5 style={{color : \"green\"}}>Recoverd: {this.state.numbers.recover} </h5>\r\n                              <h5 style={{color : \"red\"}}>Death : {this.state.numbers.death} </h5>\r\n                            </center>\r\n                        </div>                  \r\n                    </Col> \r\n\r\n                </Row>\r\n\r\n               \r\n                  \r\n               \r\n                \r\n\r\n                <div  style={{  \r\n                    position: 'fixed', \r\n                    bottom: '0px', \r\n                    right: '0px',\r\n                    marginRight : '10px',\r\n                    maxWidth : '30%'\r\n                }}>\r\n                  <h1>\r\n                    <Input type=\"select\" name=\"select\" id=\"exampleSelect\"  onChange={e => this.selectCountry(e.target.value)}>\r\n                                  <option value={''}>World</option>\r\n                                  \r\n                                  {this.state.countries.map((value, index) => {\r\n                                      return <option key={index} value={value.alpha2}>{value.name}</option>\r\n                                  })}\r\n                    </Input>\r\n                  </h1>\r\n                </div>\r\n\r\n                \r\n\r\n\r\n            </Container>\r\n        \r\n            \r\n\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport default Charts;\r\n\r\n","import React, { useState, Component } from 'react';\r\n\r\nimport {\r\n    Card, CardImg, CardText, CardGroup, CardBody, CardLink,\r\n    CardTitle, CardSubtitle, Container, Row, Col, FormGroup,\r\n    Label, Input, Alert\r\n  } from 'reactstrap';\r\n\r\n\r\nclass News extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        data : [],\r\n        countries : []\r\n        \r\n    }\r\n\r\n    fetch('https://covid19-api.org/api/countries')\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        this.setState({countries : data})\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://api.smartable.ai/coronavirus/news/CA\", { headers : {'Subscription-Key' : '3009d4ccc29e4808af1ccc25c69b4d5d'}})\r\n    .then( res => res.json() )\r\n    .then((result) => {         \r\n        this.setState({ \r\n          data : result.news\r\n        })\r\n      }, (error) => {\r\n        this.setState({\r\n          isLoaded : true,\r\n          error\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  selectCountry(code) {\r\n    fetch(\"https://api.smartable.ai/coronavirus/news/\"+code, { headers : {'Subscription-Key' : '3009d4ccc29e4808af1ccc25c69b4d5d'}})\r\n    .then( res => res.json() )\r\n    .then((result) => {         \r\n        this.setState({ \r\n          data : result.news\r\n        })\r\n      }, (error) => {\r\n        this.setState({\r\n          isLoaded : true,\r\n          error\r\n        })\r\n      }\r\n    )\r\n  }\r\n\r\n  renderNews() {\r\n      if(this.state.data<1)\r\n       return (\r\n            <Alert color=\"danger\"  className=\"mt-3\">\r\n                No news founded for selected country!\r\n            </Alert>\r\n        )\r\n      return (\r\n        <CardGroup>\r\n                    <Row xs=\"1\" sm=\"2\" md=\"3\" className=\"\">\r\n                \r\n                        {\r\n                            this.state.data.map((value, index) => { \r\n                                if(value.images!=null)   \r\n                                    return <Col key={index}>\r\n                                                <Card className=\"mt-3\" style={{width:\"100%\", height:\"95%\"}}>\r\n                                                <CardImg top width=\"100%\" src={value.images[0].url} alt=\"Card image cap\" />\r\n                                                    <CardBody>\r\n                                                        <CardTitle><h4>{value.title}</h4></CardTitle>\r\n                                                        <CardSubtitle></CardSubtitle>\r\n                                                        <CardText>{value.excerpt}</CardText>\r\n                                                        <CardLink href={value.webUrl}>Read more</CardLink>\r\n                                                    </CardBody>\r\n                                                </Card>\r\n                                            </Col>  \r\n                            })\r\n                        \r\n                        }   \r\n                    \r\n                        \r\n                    </Row>\r\n                </CardGroup>\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n          \r\n            <Container className=\"mt-3\">\r\n\r\n                \r\n            <div style={{width : '100%', display: 'inline-block'}} >\r\n                <div style={{float : 'right', width : '15%'}}>      \r\n                \r\n                    <Input id=\"selecting\" type=\"select\"  style={{}} onChange={e => this.selectCountry(e.target.value)}>\r\n                        <option disabled selected>Filtering</option>\r\n                        {this.state.countries.map((value, index) => {\r\n                            return <option key={index} value={value.alpha2}>{value.name}</option>\r\n                        })}\r\n                    </Input>\r\n                </div>\r\n            </div>        \r\n\r\n            \r\n                \r\n                {this.renderNews()}\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nexport default News;","import React, { useState, Component } from 'react'\r\n\r\nimport {\r\n    Card, CardImg, CardText, CardGroup, CardBody, CardLink,\r\n    CardTitle, CardSubtitle, Container, Row, Col, FormGroup,\r\n    Label, Input, Alert, Table\r\n  } from 'reactstrap'\r\n\r\n\r\n\r\n\r\n\r\nclass Countries extends Component{\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        countries : []\r\n        \r\n    }\r\n    fetch('https://api.covid19api.com/summary')\r\n    .then(res => res.json())\r\n    .then(data => {\r\n        this.setState({countries : data.Countries})\r\n    })\r\n  }   \r\n\r\n    render() {\r\n        return (\r\n    \r\n            <Container center className=\"mt-3\">\r\n                \r\n\r\n                <Table responsive striped hover className='mt-3' >\r\n                    <thead style={{backgroundColor: '#b9b9c4', position: \"sticky\", top:0 }}>\r\n                        <tr>\r\n                            <th></th>\r\n                            <th>Country name</th>\r\n                            <th>Country code</th>\r\n                            <th>Total confirmed</th>\r\n                            <th>Total death</th>\r\n                            <th>Total recovered</th>\r\n                            <th>Last updated</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n\r\n                        \r\n\r\n                        {this.state.countries.map((value, index) => {\r\n                                    return <tr>\r\n                                                <td scope=\"row\">{index+1}</td>\r\n                                                <td>{value.Country}</td>\r\n                                                <td>{value.CountryCode}</td>\r\n                                                <td>\r\n                                                    <p style={{color : \"#b38f00\", fontWeight: 'bold'}}>{value.TotalConfirmed}</p> \r\n                                                    (+{value.NewConfirmed})\r\n                                                </td>\r\n                                                <td>\r\n                                                    <p style={{color : \"red\", fontWeight: 'bold'}}>{value.TotalDeaths}</p> \r\n                                                    (+{value.NewDeaths})\r\n                                                </td>\r\n                                                <td>\r\n                                                    <p style={{color : \"green\", fontWeight: 'bold'}}>{value.TotalRecovered}</p> \r\n                                                    (+{value.NewRecovered})\r\n                                                </td>\r\n                                                \r\n                                                <td>{new Date(value.Date).toLocaleString()}</td>\r\n                                            </tr>\r\n                        })}\r\n                        \r\n                    </tbody>\r\n                    </Table>\r\n               \r\n    \r\n            </Container>\r\n            \r\n        )\r\n            \r\n      }\r\n\r\n\r\n\r\n}\r\nexport default Countries;\r\n\r\n","import React, { useState, Component } from 'react';\nimport './App.css';\n\nimport {  Button,  \n          Collapse,\n          Navbar,\n          NavbarToggler,\n          NavbarBrand,\n          Nav,\n          NavItem,\n          NavLink,\n          UncontrolledDropdown,\n          DropdownToggle,\n          DropdownMenu,\n          DropdownItem,\n          FormGroup,\n          Label, Input,\n          NavbarText } from 'reactstrap';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route, HashRouter\n} from \"react-router-dom\";\n\nimport Charts from './pages/Charts'\nimport News from './pages/News'\nimport Countries from './pages/Countries'\n\n\nclass App extends Component{\n\n  constructor() {\n    super()\n    this.state = {\n      isOpen : false\n    } \n  }\n\n  toggle() {\n    this.setState({isOpen : !this.state.isOpen})\n  }\n\n  render() {\n    return (\n      <HashRouter>\n      \n        <Navbar color=\"dark\" dark expand=\"md\">\n            <NavbarBrand href={process.env.PUBLIC_URL+'/#/'}>COVID-19 DASHBOARD</NavbarBrand>\n            <NavbarToggler onClick={()=> this.toggle()} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"mr-auto\" navbar>\n\n                <NavItem>\n                  <NavLink href={process.env.PUBLIC_URL+'/#/countries'}>Countries</NavLink>\n                </NavItem>\n                \n                <NavItem>\n                  <NavLink href={process.env.PUBLIC_URL+\"/#/news\"}>News</NavLink>\n                </NavItem>\n\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret>\n                    Chart\n                  </DropdownToggle>\n                  <DropdownMenu right style={{maxHeight : 400, overflowY: 'scroll'}}>\n                      <DropdownItem>\n                        Global\n                      </DropdownItem>\n                      <DropdownItem divider />\n                      <DropdownItem>\n                        Countries\n                      </DropdownItem>    \n                  </DropdownMenu>\n                </UncontrolledDropdown>\n\n              </Nav>\n              <NavbarText>Simple Text</NavbarText>\n            </Collapse>\n        </Navbar>\n      \n\n        <Switch>\n          <Route exact path=\"/\">\n            <Charts/>\n          </Route>\n          <Route path=\"/news\">\n            <News/>\n          </Route>\n          <Route path=\"/countries\">\n            <Countries/>\n          </Route>\n        </Switch>\n\n      </HashRouter>\n    );\n}\n\n\n\nnews() {\n  return (\n    <h1>foo</h1>\n  )\n}\n\n\n\n\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}